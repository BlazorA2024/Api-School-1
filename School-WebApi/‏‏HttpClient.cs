////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
//// </auto-generated>
////----------------------

//#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
//#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
//#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
//#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
//#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
//#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
//#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
//#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
//#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
//#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
//#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
//#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
//#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

//namespace MyApiClient
//{
//    using System = global::System;

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CardModelClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public CardModelClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CardVM>> GetAllCardsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/CardModel/GetAllCards"
//                    urlBuilder_.Append("api/CardModel/GetAllCards");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CardVM>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task GetCardByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/CardModel/GetCardById/{id}"
//                    urlBuilder_.Append("api/CardModel/GetCardById/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateCardVM> CreateCardAsync(CreateCardVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/CardModel/CreateCard"
//                    urlBuilder_.Append("api/CardModel/CreateCard");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateCardVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateCardVM> UpdateCardAsync(string id, CreateCardVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/CardModel/UpdateCard/{id}"
//                    urlBuilder_.Append("api/CardModel/UpdateCard/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateCardVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task DeleteCardAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/CardModel/DeleteCard/{id}"
//                    urlBuilder_.Append("api/CardModel/DeleteCard/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task NameAsync(string studentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (studentId == null)
//                throw new System.ArgumentNullException("studentId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/CardModel/{studentId}/name"
//                    urlBuilder_.Append("api/CardModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(studentId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/name");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModulClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public ModulClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModulVM>> GetAllModulAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Modul/GetAllModul"
//                    urlBuilder_.Append("api/Modul/GetAllModul");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ModulVM>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateModulVM> ModulAsync(CreateModulVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Modul"
//                    urlBuilder_.Append("api/Modul");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateModulVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<ModulModel> CreateModulAsync(CreateModulVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Modul/CreateModul"
//                    urlBuilder_.Append("api/Modul/CreateModul");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<ModulModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateModulVM> UpdateModulAsync(string id, CreateModulVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Modul/UpdateModul/{id}"
//                    urlBuilder_.Append("api/Modul/UpdateModul/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateModulVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task DeleteModulAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Modul/DeleteModul/{id}"
//                    urlBuilder_.Append("api/Modul/DeleteModul/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task GetByIdModulAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Modul/GetByIdModul/{id}"
//                    urlBuilder_.Append("api/Modul/GetByIdModul/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModulsTeacherClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public ModulsTeacherClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task ModulsTeacherGETAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "ModulsTeacher"
//                    urlBuilder_.Append("ModulsTeacher");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateModulsTeacherVM> ModulsTeacherPOSTAsync(CreateModulsTeacherVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "ModulsTeacher"
//                    urlBuilder_.Append("ModulsTeacher");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateModulsTeacherVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task ModulsTeacherGET2Async(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "ModulsTeacher/{id}"
//                    urlBuilder_.Append("ModulsTeacher/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class NameModelClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public NameModelClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task NameModelGETAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "NameModel"
//                    urlBuilder_.Append("NameModel");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task NameModelPOSTAsync(NameVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "NameModel"
//                    urlBuilder_.Append("NameModel");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task NameModelGET2Async(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "NameModel/{id}"
//                    urlBuilder_.Append("NameModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task NameModelDELETEAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "NameModel/{id}"
//                    urlBuilder_.Append("NameModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RowModelClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public RowModelClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RowVM>> GetAllRowModelAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "RowModel/GetAllRowModel"
//                    urlBuilder_.Append("RowModel/GetAllRowModel");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RowVM>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RowModelGETAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "RowModel/{id}"
//                    urlBuilder_.Append("RowModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateRowVM> CreateRowsAsync(CreateRowVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "RowModel/CreateRows"
//                    urlBuilder_.Append("RowModel/CreateRows");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateRowVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateRowVM> UpdateRowsAsync(string id, CreateRowVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "RowModel/UpdateRows/{id}"
//                    urlBuilder_.Append("RowModel/UpdateRows/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateRowVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RowModelDELETEAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "RowModel/DeleteRows{id}"
//                    urlBuilder_.Append("RowModel/DeleteRows");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task SearchRowsAsync(string keyword = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "RowModel/SearchRows"
//                    urlBuilder_.Append("RowModel/SearchRows");
//                    urlBuilder_.Append('?');
//                    if (keyword != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("keyword")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SchoolModelClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public SchoolModelClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SchoolVM>> GetAllSchoolsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/GetAllSchools"
//                    urlBuilder_.Append("api/SchoolModel/GetAllSchools");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SchoolVM>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task GetByIdSchoolAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/GetByIdSchool/{id}"
//                    urlBuilder_.Append("api/SchoolModel/GetByIdSchool/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateSchoolVM> CreateSchoolAsync(CreateSchoolVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/CreateSchool"
//                    urlBuilder_.Append("api/SchoolModel/CreateSchool");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateSchoolVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateSchoolVM> UpdateSchoolAsync(string id, CreateSchoolVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/UpdateSchool/{id}"
//                    urlBuilder_.Append("api/SchoolModel/UpdateSchool/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateSchoolVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task DeleteSchoolAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/DeleteSchool/{id}"
//                    urlBuilder_.Append("api/SchoolModel/DeleteSchool/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RowsDELETEAsync(string schoolId, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (schoolId == null)
//                throw new System.ArgumentNullException("schoolId");

//            if (rowId == null)
//                throw new System.ArgumentNullException("rowId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/{schoolId}/rows/{rowId}"
//                    urlBuilder_.Append("api/SchoolModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(schoolId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/rows/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(rowId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RowsPOSTAsync(string schoolId, string rowId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (schoolId == null)
//                throw new System.ArgumentNullException("schoolId");

//            if (rowId == null)
//                throw new System.ArgumentNullException("rowId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/{schoolId}/rows/{rowId}"
//                    urlBuilder_.Append("api/SchoolModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(schoolId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/rows/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(rowId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RowsGETAsync(string schoolId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (schoolId == null)
//                throw new System.ArgumentNullException("schoolId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/{schoolId}/rows"
//                    urlBuilder_.Append("api/SchoolModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(schoolId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/rows");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task StudentsAsync(string schoolId, string studentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (schoolId == null)
//                throw new System.ArgumentNullException("schoolId");

//            if (studentId == null)
//                throw new System.ArgumentNullException("studentId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/{schoolId}/students/{studentId}"
//                    urlBuilder_.Append("api/SchoolModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(schoolId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/students/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(studentId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task DeleteStudentSchoolAsync(string schoolId, string studentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (schoolId == null)
//                throw new System.ArgumentNullException("schoolId");

//            if (studentId == null)
//                throw new System.ArgumentNullException("studentId");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/{schoolId}/DeleteStudentSchool/{studentId}"
//                    urlBuilder_.Append("api/SchoolModel/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(schoolId, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/DeleteStudentSchool/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(studentId, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task IssueAsync(CardModel body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolModel/issue"
//                    urlBuilder_.Append("api/SchoolModel/issue");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SchoolTeacherClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public SchoolTeacherClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task SchoolTeacherGETAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolTeacher"
//                    urlBuilder_.Append("api/SchoolTeacher");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateSchoolTeacherVM> SchoolTeacherPOSTAsync(CreateSchoolTeacherVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolTeacher"
//                    urlBuilder_.Append("api/SchoolTeacher");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateSchoolTeacherVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task SchoolTeacherDELETEAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/SchoolTeacher/{id}"
//                    urlBuilder_.Append("api/SchoolTeacher/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class StudentClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public StudentClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StudentVM>> GetAllStudentAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/GetAllStudent"
//                    urlBuilder_.Append("api/Student/GetAllStudent");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<StudentVM>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateStudentVM> CreateStudentAsync(CreateStudentVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/CreateStudent"
//                    urlBuilder_.Append("api/Student/CreateStudent");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateStudentVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<StudentVM> GetStudentByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/GetStudentById/{id}"
//                    urlBuilder_.Append("api/Student/GetStudentById/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<StudentVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateStudentVM> UpdateStudentAsync(string id, CreateStudentVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/UpdateStudent/{id}"
//                    urlBuilder_.Append("api/Student/UpdateStudent/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateStudentVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task DELETEStudentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/DELETEStudent/{id}"
//                    urlBuilder_.Append("api/Student/DELETEStudent/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task RowAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/{id}/row"
//                    urlBuilder_.Append("api/Student/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/row");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task ModulsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/{id}/moduls"
//                    urlBuilder_.Append("api/Student/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/moduls");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task TeachersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/{id}/teachers"
//                    urlBuilder_.Append("api/Student/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/teachers");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task CardAsync(string id, CardModel body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/{id}/card"
//                    urlBuilder_.Append("api/Student/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
//                    urlBuilder_.Append("/card");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task SearchAsync(string keyword = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Student/search"
//                    urlBuilder_.Append("api/Student/search");
//                    urlBuilder_.Append('?');
//                    if (keyword != null)
//                    {
//                        urlBuilder_.Append(System.Uri.EscapeDataString("keyword")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(keyword, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
//                    }
//                    urlBuilder_.Length--;

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class TeacherClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public TeacherClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TeacherVM>> GetAllTeacherAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Teacher/GetAllTeacher"
//                    urlBuilder_.Append("api/Teacher/GetAllTeacher");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TeacherVM>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task GetTeacherByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Teacher/GetTeacherById/{id}"
//                    urlBuilder_.Append("api/Teacher/GetTeacherById/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateTeacherVM> CreateTeacherAsync(CreateTeacherVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("POST");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Teacher/CreateTeacher"
//                    urlBuilder_.Append("api/Teacher/CreateTeacher");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateTeacherVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<CreateTeacherVM> UpdateteacherAsync(string id, CreateTeacherVM body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
//                    var content_ = new System.Net.Http.StringContent(json_);
//                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
//                    request_.Content = content_;
//                    request_.Method = new System.Net.Http.HttpMethod("PUT");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Teacher/Updateteacher/{id}"
//                    urlBuilder_.Append("api/Teacher/Updateteacher/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<CreateTeacherVM>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task DeleteteacherAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            if (id == null)
//                throw new System.ArgumentNullException("id");

//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "api/Teacher/Deleteteacher/{id}"
//                    urlBuilder_.Append("api/Teacher/Deleteteacher/");
//                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            return;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class WeatherForecastClient
//    {
//        private System.Net.Http.HttpClient _httpClient;
//        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
//        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

//#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        public WeatherForecastClient(System.Net.Http.HttpClient httpClient)
//#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
//        {
//            _httpClient = httpClient;
//            Initialize();
//        }

//        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
//        {
//            var settings = new Newtonsoft.Json.JsonSerializerSettings();
//            UpdateJsonSerializerSettings(settings);
//            return settings;
//        }

//        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

//        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

//        partial void Initialize();

//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
//        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
//        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>OK</returns>
//        /// <exception cref="ApiException">A server side error occurred.</exception>
//        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeatherForecast>> GetWeatherForecastAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
//        {
//            var client_ = _httpClient;
//            var disposeClient_ = false;
//            try
//            {
//                using (var request_ = new System.Net.Http.HttpRequestMessage())
//                {
//                    request_.Method = new System.Net.Http.HttpMethod("GET");
//                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

//                    var urlBuilder_ = new System.Text.StringBuilder();

//                    // Operation Path: "WeatherForecast"
//                    urlBuilder_.Append("WeatherForecast");

//                    PrepareRequest(client_, request_, urlBuilder_);

//                    var url_ = urlBuilder_.ToString();
//                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

//                    PrepareRequest(client_, request_, url_);

//                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
//                    var disposeResponse_ = true;
//                    try
//                    {
//                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
//                        foreach (var item_ in response_.Headers)
//                            headers_[item_.Key] = item_.Value;
//                        if (response_.Content != null && response_.Content.Headers != null)
//                        {
//                            foreach (var item_ in response_.Content.Headers)
//                                headers_[item_.Key] = item_.Value;
//                        }

//                        ProcessResponse(client_, response_);

//                        var status_ = (int)response_.StatusCode;
//                        if (status_ == 200)
//                        {
//                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WeatherForecast>>(response_, headers_, cancellationToken).ConfigureAwait(false);
//                            if (objectResponse_.Object == null)
//                            {
//                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
//                            }
//                            return objectResponse_.Object;
//                        }
//                        else
//                        {
//                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
//                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
//                        }
//                    }
//                    finally
//                    {
//                        if (disposeResponse_)
//                            response_.Dispose();
//                    }
//                }
//            }
//            finally
//            {
//                if (disposeClient_)
//                    client_.Dispose();
//            }
//        }

//        protected struct ObjectResponseResult<T>
//        {
//            public ObjectResponseResult(T responseObject, string responseText)
//            {
//                this.Object = responseObject;
//                this.Text = responseText;
//            }

//            public T Object { get; }

//            public string Text { get; }
//        }

//        public bool ReadResponseAsString { get; set; }

//        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
//        {
//            if (response == null || response.Content == null)
//            {
//                return new ObjectResponseResult<T>(default(T), string.Empty);
//            }

//            if (ReadResponseAsString)
//            {
//                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
//                    return new ObjectResponseResult<T>(typedBody, responseText);
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
//                }
//            }
//            else
//            {
//                try
//                {
//                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
//                    using (var streamReader = new System.IO.StreamReader(responseStream))
//                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
//                    {
//                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
//                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
//                        return new ObjectResponseResult<T>(typedBody, string.Empty);
//                    }
//                }
//                catch (Newtonsoft.Json.JsonException exception)
//                {
//                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
//                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
//                }
//            }
//        }

//        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
//        {
//            if (value == null)
//            {
//                return "";
//            }

//            if (value is System.Enum)
//            {
//                var name = System.Enum.GetName(value.GetType(), value);
//                if (name != null)
//                {
//                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
//                    if (field != null)
//                    {
//                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
//                            as System.Runtime.Serialization.EnumMemberAttribute;
//                        if (attribute != null)
//                        {
//                            return attribute.Value != null ? attribute.Value : name;
//                        }
//                    }

//                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
//                    return converted == null ? string.Empty : converted;
//                }
//            }
//            else if (value is bool)
//            {
//                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
//            }
//            else if (value is byte[])
//            {
//                return System.Convert.ToBase64String((byte[])value);
//            }
//            else if (value is string[])
//            {
//                return string.Join(",", (string[])value);
//            }
//            else if (value.GetType().IsArray)
//            {
//                var valueArray = (System.Array)value;
//                var valueTextArray = new string[valueArray.Length];
//                for (var i = 0; i < valueArray.Length; i++)
//                {
//                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
//                }
//                return string.Join(",", valueTextArray);
//            }

//            var result = System.Convert.ToString(value, cultureInfo);
//            return result == null ? "" : result;
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CardModel
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset Date { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("studentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string StudentId { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//        [Newtonsoft.Json.JsonProperty("academic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Academic { get; set; }

//        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Stage { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CardVM
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset Date { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("studentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string StudentId { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//        [Newtonsoft.Json.JsonProperty("academic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Academic { get; set; }

//        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Stage { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateCardVM
//    {
//        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.DateTimeOffset Date { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("studentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string StudentId { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//        [Newtonsoft.Json.JsonProperty("academic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Academic { get; set; }

//        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Stage { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateModulVM
//    {
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateModulsTeacherVM
//    {
//        [Newtonsoft.Json.JsonProperty("modelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ModelId { get; set; }

//        [Newtonsoft.Json.JsonProperty("teacherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string TeacherId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateNameVM
//    {
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Title { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateRowVM
//    {
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateSchoolTeacherVM
//    {
//        [Newtonsoft.Json.JsonProperty("schoolModelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolModelId { get; set; }

//        [Newtonsoft.Json.JsonProperty("teacherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string TeacherId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateSchoolVM
//    {
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateStudentVM
//    {
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public CreateNameVM Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int? Age { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class CreateTeacherVM
//    {
//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public CreateNameVM Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("modelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ModelId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModulModel
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//        [Newtonsoft.Json.JsonProperty("row", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public RowModel Row { get; set; }

//        [Newtonsoft.Json.JsonProperty("teachers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<TeacherModel> Teachers { get; set; }

//        [Newtonsoft.Json.JsonProperty("students", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<StudentModel> Students { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModulVM
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ModulsTeacher
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("modelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string ModelId { get; set; }

//        [Newtonsoft.Json.JsonProperty("modelModuls", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public ModulModel ModelModuls { get; set; }

//        [Newtonsoft.Json.JsonProperty("teacherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string TeacherId { get; set; }

//        [Newtonsoft.Json.JsonProperty("teacherModel", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public TeacherModel TeacherModel { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class NameModel
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Title { get; set; }

//        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string FullName { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class NameVM
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Title { get; set; }

//        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string FullName { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RowModel
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("school", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public SchoolModel School { get; set; }

//        [Newtonsoft.Json.JsonProperty("moduls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulModel> Moduls { get; set; }

//        [Newtonsoft.Json.JsonProperty("teachers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<TeacherModel> Teachers { get; set; }

//        [Newtonsoft.Json.JsonProperty("students", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<StudentModel> Students { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class RowVM
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("school", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public CreateSchoolVM School { get; set; }

//        [Newtonsoft.Json.JsonProperty("moduls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulVM> Moduls { get; set; }

//        [Newtonsoft.Json.JsonProperty("teachers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<TeacherVM> Teachers { get; set; }

//        [Newtonsoft.Json.JsonProperty("studentsVM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<StudentVM> StudentsVM { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SchoolModel
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<RowModel> Rows { get; set; }

//        [Newtonsoft.Json.JsonProperty("teachers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<TeacherModel> Teachers { get; set; }

//        [Newtonsoft.Json.JsonProperty("students", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<StudentModel> Students { get; set; }

//        [Newtonsoft.Json.JsonProperty("moduls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulModel> Moduls { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SchoolTeacher
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolModel", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public SchoolModel SchoolModel { get; set; }

//        [Newtonsoft.Json.JsonProperty("teacherId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string TeacherId { get; set; }

//        [Newtonsoft.Json.JsonProperty("teacherModel", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public TeacherModel TeacherModel { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class SchoolVM
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<RowVM> Rows { get; set; }

//        [Newtonsoft.Json.JsonProperty("moduls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulVM> Moduls { get; set; }

//        [Newtonsoft.Json.JsonProperty("teachers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<TeacherVM> Teachers { get; set; }

//        [Newtonsoft.Json.JsonProperty("studentsVM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<StudentVM> StudentsVM { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public enum SexType
//    {

//        _0 = 0,

//        _1 = 1,

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class StudentModel
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public NameModel Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("nameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string NameId { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//        [Newtonsoft.Json.JsonProperty("row", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public RowModel Row { get; set; }

//        [Newtonsoft.Json.JsonProperty("card", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public CardModel Card { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("school", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public SchoolModel School { get; set; }

//        [Newtonsoft.Json.JsonProperty("sexType", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public SexType SexType { get; set; }

//        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int Age { get; set; }

//        [Newtonsoft.Json.JsonProperty("moduls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulModel> Moduls { get; set; }

//        [Newtonsoft.Json.JsonProperty("teachers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<TeacherModel> Teachers { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class StudentVM
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("rowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string RowId { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public NameVM Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int? Age { get; set; }

//        [Newtonsoft.Json.JsonProperty("row", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public RowVM Row { get; set; }

//        [Newtonsoft.Json.JsonProperty("card", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public CreateCardVM Card { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string SchoolId { get; set; }

//        [Newtonsoft.Json.JsonProperty("school", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public SchoolVM School { get; set; }

//        [Newtonsoft.Json.JsonProperty("moduls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulVM> Moduls { get; set; }

//        [Newtonsoft.Json.JsonProperty("teachers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<TeacherVM> Teachers { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class TeacherModel
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("nameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string NameId { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public NameModel Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<RowModel> Rows { get; set; }

//        [Newtonsoft.Json.JsonProperty("schoolModels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<SchoolTeacher> SchoolModels { get; set; }

//        [Newtonsoft.Json.JsonProperty("modulsTeachers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulsTeacher> ModulsTeachers { get; set; }

//        [Newtonsoft.Json.JsonProperty("moduls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulModel> Moduls { get; set; }

//        [Newtonsoft.Json.JsonProperty("students", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<StudentModel> Students { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class TeacherVM
//    {
//        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Id { get; set; }

//        [Newtonsoft.Json.JsonProperty("nameId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string NameId { get; set; }

//        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public NameVM Name { get; set; }

//        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<RowVM> Rows { get; set; }

//        [Newtonsoft.Json.JsonProperty("moduls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<ModulVM> Moduls { get; set; }

//        [Newtonsoft.Json.JsonProperty("students", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<StudentVM> Students { get; set; }

//        [Newtonsoft.Json.JsonProperty("schools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public System.Collections.Generic.ICollection<SchoolVM> Schools { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class WeatherForecast
//    {
//        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
//        public System.DateTimeOffset Date { get; set; }

//        [Newtonsoft.Json.JsonProperty("temperatureC", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int TemperatureC { get; set; }

//        [Newtonsoft.Json.JsonProperty("temperatureF", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public int TemperatureF { get; set; }

//        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
//        public string Summary { get; set; }

//    }

//    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
//    {
//        public DateFormatConverter()
//        {
//            DateTimeFormat = "yyyy-MM-dd";
//        }
//    }



//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiException : System.Exception
//    {
//        public int StatusCode { get; private set; }

//        public string Response { get; private set; }

//        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
//            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
//        {
//            StatusCode = statusCode;
//            Response = response;
//            Headers = headers;
//        }

//        public override string ToString()
//        {
//            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
//    public partial class ApiException<TResult> : ApiException
//    {
//        public TResult Result { get; private set; }

//        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
//            : base(message, statusCode, response, headers, innerException)
//        {
//            Result = result;
//        }
//    }

//}

//#pragma warning restore 108
//#pragma warning restore 114
//#pragma warning restore 472
//#pragma warning restore 612
//#pragma warning restore 1573
//#pragma warning restore 1591
//#pragma warning restore 8073
//#pragma warning restore 3016
//#pragma warning restore 8603
//#pragma warning restore 8604
//#pragma warning restore 8625